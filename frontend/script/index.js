const newCategoryTextInput = document.getElementById('add-new-category-tab');
const addNewCategoryTabBtn = document.querySelector('.add-new-category-tab-btn');
const createdCategoryTabsList = document.querySelector('.created-category-tabs-list');
const categoryTabsListContainer = document.querySelector('.category-tabs-list_container');




// –§—É–Ω–∫—Ü—ñ—è —Ä–µ–Ω–¥–µ—Ä—É –≤–∫–ª–∞–¥–∫–∏ –≤ DOM
function renderTab(tab) {
    const newCategoryLi = document.createElement('li');
    newCategoryLi.classList.add('category-tab');
    newCategoryLi.dataset.id = tab._id; // id –∑ MongoDB

    newCategoryLi.innerHTML = `
        <button class="created-category-tabs-button">${tab.name}</button>
        <button class="close-tab-button" aria-label="–ó–∞–∫—Ä–∏—Ç–∏ –≤–∫–ª–∞–¥–∫—É">√ó</button>
    `;

    createdCategoryTabsList.appendChild(newCategoryLi);
    categoryTabsListContainer.style.display = 'flex';

    // –ö–ª—ñ–∫ –ø–æ –≤–∫–ª–∞–¥—Ü—ñ
    const createdCategoryTab = newCategoryLi.querySelector('.created-category-tabs-button');
    createdCategoryTab.addEventListener('click', () => {
        createdCategoryTab.classList.toggle('active');
    });

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏ (DOM, –±–µ–∫–µ–Ω–¥ –∑—Ä–æ–±–∏–º–æ –ø—ñ–∑–Ω—ñ—à–µ)
    const closeBtn = newCategoryLi.querySelector('.close-tab-button');
    closeBtn.addEventListener('click', async() => {
        
        const token = localStorage.getItem('token');

        try {
            const res = await fetch(`http://localhost:5000/api/tabs/${tab._id}`,{
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            });

            const data = await res.json();

            if(!res.ok){
                alert(data.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏');
                return;
            }

            newCategoryLi.remove();

            if (!createdCategoryTabsList.firstChild) {
                categoryTabsListContainer.style.display = 'none';
            }

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤–∫–ª–∞–¥–∫–∏:', error);
            alert('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!');
        }
    });
}


// –∑–∞–≤–∞–Ω–µ—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–≤–∞—Ü—ñ/—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó

window.addEventListener('DOMContentLoaded', () => {
    const token = localStorage.getItem('token');
    const username = localStorage.getItem('username');

    console.log('–ù–∞ –¥–∞–Ω–∏–π —á–∞—Å –≤ —Å–∏—Å—Ç–µ–º—ñ:', username);
    console.log('–¢–æ–∫–µ–Ω –≤—Ö–æ–¥—É:', token);

    if (!token) {
        document.querySelector('.auth-modal').classList.add('show');
    } else {
        loadTabs();
    }
});


// change modal window  auth || reg

document.addEventListener('click', (event) => {
    if (event.target.id === 'show-register') {
        document.querySelector('.auth-modal').classList.remove('show');
        document.getElementById('register-modal').classList.add('show');
    }

    if (event.target.id === 'show-login') {
        document.getElementById('register-modal').classList.remove('show');
        document.querySelector('.auth-modal').classList.add('show');
    }
});


// modal window reg

document.getElementById('register-button').addEventListener('click', async () => {
    const username = document.getElementById('register-username').value;
    const email = document.getElementById('register-email').value;
    const password = document.getElementById('register-password').value;

    try {
        const res = await fetch('http://localhost:5000/api/register', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password, username })
        });

        const data = await res.json();

        if (res.ok) {
            alert('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!');
            document.getElementById('register-modal').classList.remove('show');
        } else {
            alert(data.message || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
        }
    } catch (error) {
        alert('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!');
        console.error(error);
    }
});


// modal window  auth

document.getElementById('login-btn').addEventListener('click', async () => {
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;

    try {
        const res = await fetch('http://localhost:5000/api/login', {
            method: 'POST',
            headers: { 'Content-Type': 'Application/json' },
            body: JSON.stringify({ email, password })
        });

        const data = await res.json();
        console.log('–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Å–µ—Ä–≤–µ—Ä–∞:', data);

        if (res.ok) {
            alert('–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!');
            localStorage.setItem('token', data.token);
            localStorage.setItem('username', data.user.username);
            document.querySelector('.auth-modal').classList.remove('show');

            // –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É –æ–¥—Ä–∞–∑—É –ø—ñ–¥—Ç—è–≥—É—î–º–æ –≤–∫–ª–∞–¥–∫–∏
            loadTabs();
        } else {
            alert(data.message || '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É');
        }
    } catch (error) {
        alert('–©–æ—Å—å –ø—ñ—â–ª–æ –Ω–µ —Ç–∞–∫!');
        console.error(error);
    }
});

// logout btn

document.getElementById('logout-btn').addEventListener('click', () => {
    localStorage.removeItem('token');
    localStorage.removeItem('username');
    document.querySelector('.auth-modal').classList.add('show');
    alert('–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–∫–∞—É–Ω—Ç—É');
});


// add and delete category tab

window.addEventListener('DOMContentLoaded', () => {
    addNewCategoryTabBtn.addEventListener('click', async() => {
        const categoryName = newCategoryTextInput.value.trim();

        if (categoryName === '') {
            alert('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó!');
            return;
        }

        const token  =  localStorage.getItem('token');
        try {
            
            const res = await fetch('http://localhost:5000/api/tabs', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token
                },
                body: JSON.stringify({ name: categoryName})
            })

            const data = await res.json();

            if(!res.ok){
                alert(data.message || '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∏');
                return;
            }

            renderTab(data.tab);

            newCategoryTextInput.value = '';
            categoryTabsListContainer.style.display = 'flex';

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∫–ª–∞–¥–∫–∏:', error);
            alert('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!');    
        }
    });
});



// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∫–ª–∞–¥–æ–∫ –∑ —Å–µ—Ä–≤–µ—Ä–∞
async function loadTabs() {
    const token = localStorage.getItem('token');
    if (!token) return;

    try {
        const res = await fetch('http://localhost:5000/api/tabs', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + token
            }
        });

        const data = await res.json();
        console.log('–í–∫–ª–∞–¥–∫–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞:', data);
        

        if (!res.ok) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∫–ª–∞–¥–æ–∫:', data.message);
            return;
        }

        // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –≤—ñ–¥–º–∞–ª—å–æ–≤–∫–æ—é
        createdCategoryTabsList.innerHTML = '';

        // –ú–∞–ª—é—î–º–æ –≤–∫–ª–∞–¥–∫–∏
       data.tabs.forEach(tab => renderTab(tab));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∫–ª–∞–¥–æ–∫:', error);
    }
}



// add and delete task item

const newTaskInput = document.getElementById('new-task-input');
const addNewTaskBtn = document.querySelector('.add-new-task-btn');
const taskList = document.querySelector('.task-list');

addNewTaskBtn.addEventListener('click', () => {
    newTaskText = newTaskInput.value.trim();

    if (newTaskText == '') {
        alert('–í–≤–µ–¥—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è!');
        return;
    }

    const taskId = 'task-' + Date.now();

    const newLi = document.createElement('li');
    newLi.className = 'task-item';

    newLi.innerHTML = `
        <input type="checkbox" id="${taskId}" class="task-checkbox">
        <label for="${taskId}" class="task-label">${newTaskText}</label>
        <button class="task-delete">üóëÔ∏è</button>
    `;

    taskList.appendChild(newLi);
    taskList.classList.add('active-task-field');

    newTaskInput.value = '';

    const delBtn = newLi.querySelector('.task-delete');
    delBtn.addEventListener('click', () => {
        newLi.remove();

        if (taskList.firstChild === null) {
            taskList.classList.remove('active-task-field');
        }
    });
});